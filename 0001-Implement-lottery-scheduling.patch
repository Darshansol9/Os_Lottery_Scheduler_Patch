From e3092b0104747b2beec1f3561510f696bc268e8b Mon Sep 17 00:00:00 2001
From: Darshan Solanki <das968@nyu.edu>
Date: Sun, 24 Nov 2019 16:11:42 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 41 ++++++++++++++++++++++++++++++++++++++++-
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 13 +++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 60 insertions(+), 1 deletion(-)

diff --git a/Makefile b/Makefile
index 5d91068..39476ea 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+        _lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..5e5add1 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 20;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -265,11 +266,33 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+// This function counts the total ticket assigned to all runnable process and return that value.
+int countTotalTickets(void){
+	struct proc *pt;
+	int total_tckt = 0;
+	pt = ptable.proc;
+	while(pt < &ptable.proc[NPROC])
+	{
+		if(pt->state == RUNNABLE){
+			total_tckt += pt->tickets;	
+		}
+		pt++;
+
+	} //end of while
+
+	return total_tckt;
+
+} // end of function
+
+
 void
 scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
+  int count_so_far = 0;
+  int winner = 0;
+  int total_tckts = 0;
 
   for(;;){
     // Enable interrupts on this processor.
@@ -280,10 +303,24 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    count_so_far = 0;
+    winner = 0;
+    total_tckts = 0;
+
+    total_tckts = countTotalTickets(); // get the total count of tickets assigned to the processes that are runnable
+    winner = random_at_most(total_tckts);  //select any random ticket number in from all assigned ticket number.
+
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      //This ensures  that we have not encountered the process who is in range of winner ticket, Once we reach we break and context switch.
+      if((count_so_far + p->tickets) < winner){
+	count_so_far += p->tickets;
+	continue;
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -297,6 +334,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break; //this will ensure that, cpu searches for runnable process from starting unlike in round robin.
     }
     release(&ptable.lock);
 
@@ -463,7 +501,8 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    //cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %sc%d", p->pid, state, p->name,p->tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..b700919 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // Adding ticket attribute for lotttery scheduler
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..cc8330b 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,16 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+//Setting system tickets function.
+int sys_settickets(void){
+	int tckt_num;
+	if(argint(0,&tckt_num) < 0)
+	{
+		proc->tickets = 20; //setting 20 tickets default.
+	}
+	else{
+		proc->tickets = tckt_num;	
+	}
+	return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

